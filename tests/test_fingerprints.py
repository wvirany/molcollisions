import pytest

from molcollisions.fingerprints import CompressedFP, SparseFP


def test_initialization():
    """Test that we can create SparseFP and CompressedFP instance."""
    sparse_fp = SparseFP(radius=2, count=True)
    assert sparse_fp.radius == 2
    assert sparse_fp.count == True  # noqa: E712; override linter

    compressed_fp = CompressedFP(radius=2, count=True, fp_size=2048)
    assert compressed_fp.radius == 2
    assert compressed_fp.count == True  # noqa: E712; override linter
    assert compressed_fp.fp_size == 2048

    with pytest.raises(TypeError, match="count must be bool"):
        SparseFP(count="yes")


def test_fp_call():
    """Test that we can call the fingerprint on a simple molecule."""
    sparse_fp = SparseFP(radius=2, count=True)
    result = sparse_fp("CCO")  # ethanol
    assert result is not None

    compressed_fp = CompressedFP(radius=2, count=True, fp_size=2048)
    result = compressed_fp("CCO")
    assert result is not None


def test_fps_different():
    """Test that the fingerprints generated by SparseFP and CompressedFP are different"""
    sparse_fp = SparseFP(radius=2, count=True)
    compressed_fp = CompressedFP(radius=2, count=True, fp_size=2048)

    result1 = sparse_fp("CCO")
    result2 = compressed_fp("CCO")

    assert result1 != result2


def test_invalid_smiles():
    """Test that, when called, the fingerprint classes correctly handle invalid SMILES strings"""
    sparse_fp = SparseFP(radius=2, count=True)
    compressed_fp = CompressedFP(radius=2, count=True, fp_size=2048)

    # Both should raise ValueError for invalid SMILES
    with pytest.raises(ValueError, match="Could not parse SMILES"):
        sparse_fp("invalid_smiles_123")

    with pytest.raises(ValueError, match="Could not parse SMILES"):
        compressed_fp("invalid_smiles_123")
